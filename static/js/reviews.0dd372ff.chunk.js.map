{"version":3,"sources":["component/Reviews/Reviews.module.css","component/Reviews/Reviews.js"],"names":["module","exports","Reviews","state","reviews","isLoaded","error","movieId","this","props","match","params","api","getReviews","then","data","setState","results","Promise","reject","Error","catch","finally","message","LoaderSpinner","length","className","s","List","map","author","content","id","Item","Title","Component"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,KAAO,sBAAsB,MAAQ,yB,6LCM/DC,E,4MAYnBC,MAAQ,CACNC,QAAS,GACTC,UAAU,EACVC,MAAO,M,yLAICC,EAAYC,KAAKC,MAAMC,MAAMC,OAA7BJ,QAERK,IAAIC,WAAWN,GACdO,MAAK,SAACC,GAGF,GAFD,EAAKC,SAAS,CAAEX,UAAU,KAEpBU,EAAKX,QAAQa,QAChB,OAAOC,QAAQC,OAAO,IAAIC,MAAM,+CAGlC,EAAKJ,SAAS,CAAEZ,QAASW,EAAKX,QAAQa,aAExCI,OAAM,SAAAf,GAAK,OAAI,EAAKU,SAAS,CAAEV,aAC/BgB,QAASd,KAAKQ,SAAS,CAAEX,UAAU,K,qIAS9B,IAAD,EAC8BG,KAAKL,MAAlCC,EADD,EACCA,QAASE,EADV,EACUA,MAAOD,EADjB,EACiBA,SAExB,OACE,qCACGC,GAAS,6BAAKA,EAAMiB,WACnBlB,GAAY,cAACmB,EAAA,EAAD,IACbpB,EAAQqB,OAAS,GAChB,oBAAIC,UAAWC,IAAEC,KAAjB,SACGxB,EAAQyB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACX,qBAAIN,UAAWC,IAAEM,KAAjB,UACE,qBAAIP,UAAWC,IAAEO,MAAjB,qBAAiCJ,KACjC,4BAAIC,MAFsBC,QAMd,IAAnB5B,EAAQqB,QAAgB,gF,GAzDIU","file":"static/js/reviews.0dd372ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"Reviews_List__25wjJ\",\"Item\":\"Reviews_Item__3Kei1\",\"Title\":\"Reviews_Title__2RpUn\"};","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport api from '../../servises/tmdb-api';\r\nimport LoaderSpinner from '../Loader/LoaderSpinner';\r\nimport s from './Reviews.module.css';\r\n// import axios from 'axios';\r\n\r\nexport default class Reviews extends Component {\r\n     static propTypes = {\r\n    reviews: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        author: PropTypes.string.isRequired,\r\n        content: PropTypes.string.isRequired,\r\n      }),\r\n    ),\r\n    movieId : PropTypes.string,\r\n  };\r\n  \r\n  state = {\r\n    reviews: [],\r\n    isLoaded: false,\r\n    error: null,\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { movieId } = this.props.match.params;\r\n    \r\n    api.getReviews(movieId)\r\n    .then((data) => {\r\n        this.setState({ isLoaded: true })\r\n        //  console.log('dataR', data);\r\n         if (!data.reviews.results) {\r\n           return Promise.reject(new Error('Sorry, unfortunately nothing was found ...'));\r\n         }\r\n         \r\n         this.setState({ reviews: data.reviews.results })\r\n       })\r\n      .catch(error => this.setState({ error }))\r\n      .finally (this.setState({ isLoaded: false, }))\r\n   \r\n\r\n    // const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=8e1b01f3d4ab71ddc5b71444dcf769fc&language=en-US&page=1`)\r\n    // // console.log(response.data.results);\r\n    \r\n    // this.setState({reviews: response.data.results})\r\n  }\r\n  \r\n  render() {\r\n    const { reviews, error, isLoaded } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {error && <h1>{error.message}</h1>}\r\n        {!isLoaded && <LoaderSpinner />}\r\n        {reviews.length > 0 &&\r\n          <ul className={s.List}>\r\n            {reviews.map(({ author, content, id }) =>\r\n              <li className={s.Item} key={id}>\r\n                <h2 className={s.Title}>Author: {author}</h2>\r\n                <p>{content}</p>\r\n              </li>)}\r\n          </ul>  \r\n        }\r\n        {reviews.length === 0 && <p>We don't have any reviews for this movie</p>}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n"],"sourceRoot":""}